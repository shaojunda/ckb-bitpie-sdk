// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/dennis/.gvm/pkgsets/go1.14.2/global/pkg/mod/github.com/nervosnetwork/ckb-sdk-go@v0.0.0-20201104063014-af53e6797808/rpc/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	indexer "github.com/nervosnetwork/ckb-sdk-go/indexer"
	types "github.com/nervosnetwork/ckb-sdk-go/types"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetTipBlockNumber mocks base method
func (m *MockClient) GetTipBlockNumber(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTipBlockNumber", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTipBlockNumber indicates an expected call of GetTipBlockNumber
func (mr *MockClientMockRecorder) GetTipBlockNumber(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTipBlockNumber", reflect.TypeOf((*MockClient)(nil).GetTipBlockNumber), ctx)
}

// GetTipHeader mocks base method
func (m *MockClient) GetTipHeader(ctx context.Context) (*types.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTipHeader", ctx)
	ret0, _ := ret[0].(*types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTipHeader indicates an expected call of GetTipHeader
func (mr *MockClientMockRecorder) GetTipHeader(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTipHeader", reflect.TypeOf((*MockClient)(nil).GetTipHeader), ctx)
}

// GetCurrentEpoch mocks base method
func (m *MockClient) GetCurrentEpoch(ctx context.Context) (*types.Epoch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentEpoch", ctx)
	ret0, _ := ret[0].(*types.Epoch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentEpoch indicates an expected call of GetCurrentEpoch
func (mr *MockClientMockRecorder) GetCurrentEpoch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentEpoch", reflect.TypeOf((*MockClient)(nil).GetCurrentEpoch), ctx)
}

// GetEpochByNumber mocks base method
func (m *MockClient) GetEpochByNumber(ctx context.Context, number uint64) (*types.Epoch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpochByNumber", ctx, number)
	ret0, _ := ret[0].(*types.Epoch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpochByNumber indicates an expected call of GetEpochByNumber
func (mr *MockClientMockRecorder) GetEpochByNumber(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochByNumber", reflect.TypeOf((*MockClient)(nil).GetEpochByNumber), ctx, number)
}

// GetBlockHash mocks base method
func (m *MockClient) GetBlockHash(ctx context.Context, number uint64) (*types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", ctx, number)
	ret0, _ := ret[0].(*types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHash indicates an expected call of GetBlockHash
func (mr *MockClientMockRecorder) GetBlockHash(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockClient)(nil).GetBlockHash), ctx, number)
}

// GetBlock mocks base method
func (m *MockClient) GetBlock(ctx context.Context, hash types.Hash) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", ctx, hash)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockClientMockRecorder) GetBlock(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockClient)(nil).GetBlock), ctx, hash)
}

// GetHeader mocks base method
func (m *MockClient) GetHeader(ctx context.Context, hash types.Hash) (*types.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", ctx, hash)
	ret0, _ := ret[0].(*types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeader indicates an expected call of GetHeader
func (mr *MockClientMockRecorder) GetHeader(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockClient)(nil).GetHeader), ctx, hash)
}

// GetHeaderByNumber mocks base method
func (m *MockClient) GetHeaderByNumber(ctx context.Context, number uint64) (*types.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByNumber", ctx, number)
	ret0, _ := ret[0].(*types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderByNumber indicates an expected call of GetHeaderByNumber
func (mr *MockClientMockRecorder) GetHeaderByNumber(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByNumber", reflect.TypeOf((*MockClient)(nil).GetHeaderByNumber), ctx, number)
}

// GetCellsByLockHash mocks base method
func (m *MockClient) GetCellsByLockHash(ctx context.Context, hash types.Hash, from, to uint64) ([]*types.Cell, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCellsByLockHash", ctx, hash, from, to)
	ret0, _ := ret[0].([]*types.Cell)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCellsByLockHash indicates an expected call of GetCellsByLockHash
func (mr *MockClientMockRecorder) GetCellsByLockHash(ctx, hash, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCellsByLockHash", reflect.TypeOf((*MockClient)(nil).GetCellsByLockHash), ctx, hash, from, to)
}

// GetLiveCell mocks base method
func (m *MockClient) GetLiveCell(ctx context.Context, outPoint *types.OutPoint, withData bool) (*types.CellWithStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiveCell", ctx, outPoint, withData)
	ret0, _ := ret[0].(*types.CellWithStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiveCell indicates an expected call of GetLiveCell
func (mr *MockClientMockRecorder) GetLiveCell(ctx, outPoint, withData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiveCell", reflect.TypeOf((*MockClient)(nil).GetLiveCell), ctx, outPoint, withData)
}

// GetTransaction mocks base method
func (m *MockClient) GetTransaction(ctx context.Context, hash types.Hash) (*types.TransactionWithStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, hash)
	ret0, _ := ret[0].(*types.TransactionWithStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction
func (mr *MockClientMockRecorder) GetTransaction(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockClient)(nil).GetTransaction), ctx, hash)
}

// GetCellbaseOutputCapacityDetails mocks base method
func (m *MockClient) GetCellbaseOutputCapacityDetails(ctx context.Context, hash types.Hash) (*types.BlockReward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCellbaseOutputCapacityDetails", ctx, hash)
	ret0, _ := ret[0].(*types.BlockReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCellbaseOutputCapacityDetails indicates an expected call of GetCellbaseOutputCapacityDetails
func (mr *MockClientMockRecorder) GetCellbaseOutputCapacityDetails(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCellbaseOutputCapacityDetails", reflect.TypeOf((*MockClient)(nil).GetCellbaseOutputCapacityDetails), ctx, hash)
}

// GetBlockByNumber mocks base method
func (m *MockClient) GetBlockByNumber(ctx context.Context, number uint64) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", ctx, number)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber
func (mr *MockClientMockRecorder) GetBlockByNumber(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockClient)(nil).GetBlockByNumber), ctx, number)
}

// DryRunTransaction mocks base method
func (m *MockClient) DryRunTransaction(ctx context.Context, transaction *types.Transaction) (*types.DryRunTransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DryRunTransaction", ctx, transaction)
	ret0, _ := ret[0].(*types.DryRunTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DryRunTransaction indicates an expected call of DryRunTransaction
func (mr *MockClientMockRecorder) DryRunTransaction(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DryRunTransaction", reflect.TypeOf((*MockClient)(nil).DryRunTransaction), ctx, transaction)
}

// CalculateDaoMaximumWithdraw mocks base method
func (m *MockClient) CalculateDaoMaximumWithdraw(ctx context.Context, point *types.OutPoint, hash types.Hash) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateDaoMaximumWithdraw", ctx, point, hash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateDaoMaximumWithdraw indicates an expected call of CalculateDaoMaximumWithdraw
func (mr *MockClientMockRecorder) CalculateDaoMaximumWithdraw(ctx, point, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateDaoMaximumWithdraw", reflect.TypeOf((*MockClient)(nil).CalculateDaoMaximumWithdraw), ctx, point, hash)
}

// EstimateFeeRate mocks base method
func (m *MockClient) EstimateFeeRate(ctx context.Context, blocks uint64) (*types.EstimateFeeRateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateFeeRate", ctx, blocks)
	ret0, _ := ret[0].(*types.EstimateFeeRateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateFeeRate indicates an expected call of EstimateFeeRate
func (mr *MockClientMockRecorder) EstimateFeeRate(ctx, blocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateFeeRate", reflect.TypeOf((*MockClient)(nil).EstimateFeeRate), ctx, blocks)
}

// IndexLockHash mocks base method
func (m *MockClient) IndexLockHash(ctx context.Context, lockHash types.Hash, indexFrom uint64) (*types.LockHashIndexState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexLockHash", ctx, lockHash, indexFrom)
	ret0, _ := ret[0].(*types.LockHashIndexState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexLockHash indicates an expected call of IndexLockHash
func (mr *MockClientMockRecorder) IndexLockHash(ctx, lockHash, indexFrom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexLockHash", reflect.TypeOf((*MockClient)(nil).IndexLockHash), ctx, lockHash, indexFrom)
}

// GetLockHashIndexStates mocks base method
func (m *MockClient) GetLockHashIndexStates(ctx context.Context) ([]*types.LockHashIndexState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLockHashIndexStates", ctx)
	ret0, _ := ret[0].([]*types.LockHashIndexState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLockHashIndexStates indicates an expected call of GetLockHashIndexStates
func (mr *MockClientMockRecorder) GetLockHashIndexStates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLockHashIndexStates", reflect.TypeOf((*MockClient)(nil).GetLockHashIndexStates), ctx)
}

// GetLiveCellsByLockHash mocks base method
func (m *MockClient) GetLiveCellsByLockHash(ctx context.Context, lockHash types.Hash, page, per uint, reverseOrder bool) ([]*types.LiveCell, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiveCellsByLockHash", ctx, lockHash, page, per, reverseOrder)
	ret0, _ := ret[0].([]*types.LiveCell)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiveCellsByLockHash indicates an expected call of GetLiveCellsByLockHash
func (mr *MockClientMockRecorder) GetLiveCellsByLockHash(ctx, lockHash, page, per, reverseOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiveCellsByLockHash", reflect.TypeOf((*MockClient)(nil).GetLiveCellsByLockHash), ctx, lockHash, page, per, reverseOrder)
}

// GetTransactionsByLockHash mocks base method
func (m *MockClient) GetTransactionsByLockHash(ctx context.Context, lockHash types.Hash, page, per uint, reverseOrder bool) ([]*types.CellTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByLockHash", ctx, lockHash, page, per, reverseOrder)
	ret0, _ := ret[0].([]*types.CellTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByLockHash indicates an expected call of GetTransactionsByLockHash
func (mr *MockClientMockRecorder) GetTransactionsByLockHash(ctx, lockHash, page, per, reverseOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByLockHash", reflect.TypeOf((*MockClient)(nil).GetTransactionsByLockHash), ctx, lockHash, page, per, reverseOrder)
}

// DeindexLockHash mocks base method
func (m *MockClient) DeindexLockHash(ctx context.Context, lockHash types.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeindexLockHash", ctx, lockHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeindexLockHash indicates an expected call of DeindexLockHash
func (mr *MockClientMockRecorder) DeindexLockHash(ctx, lockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeindexLockHash", reflect.TypeOf((*MockClient)(nil).DeindexLockHash), ctx, lockHash)
}

// LocalNodeInfo mocks base method
func (m *MockClient) LocalNodeInfo(ctx context.Context) (*types.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalNodeInfo", ctx)
	ret0, _ := ret[0].(*types.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalNodeInfo indicates an expected call of LocalNodeInfo
func (mr *MockClientMockRecorder) LocalNodeInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalNodeInfo", reflect.TypeOf((*MockClient)(nil).LocalNodeInfo), ctx)
}

// GetPeers mocks base method
func (m *MockClient) GetPeers(ctx context.Context) ([]*types.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers", ctx)
	ret0, _ := ret[0].([]*types.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeers indicates an expected call of GetPeers
func (mr *MockClientMockRecorder) GetPeers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockClient)(nil).GetPeers), ctx)
}

// GetBannedAddresses mocks base method
func (m *MockClient) GetBannedAddresses(ctx context.Context) ([]*types.BannedAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBannedAddresses", ctx)
	ret0, _ := ret[0].([]*types.BannedAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBannedAddresses indicates an expected call of GetBannedAddresses
func (mr *MockClientMockRecorder) GetBannedAddresses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannedAddresses", reflect.TypeOf((*MockClient)(nil).GetBannedAddresses), ctx)
}

// SetBan mocks base method
func (m *MockClient) SetBan(ctx context.Context, address, command string, banTime uint64, absolute bool, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBan", ctx, address, command, banTime, absolute, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBan indicates an expected call of SetBan
func (mr *MockClientMockRecorder) SetBan(ctx, address, command, banTime, absolute, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBan", reflect.TypeOf((*MockClient)(nil).SetBan), ctx, address, command, banTime, absolute, reason)
}

// SendTransaction mocks base method
func (m *MockClient) SendTransaction(ctx context.Context, tx *types.Transaction) (*types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", ctx, tx)
	ret0, _ := ret[0].(*types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction
func (mr *MockClientMockRecorder) SendTransaction(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockClient)(nil).SendTransaction), ctx, tx)
}

// SendTransactionNoneValidation mocks base method
func (m *MockClient) SendTransactionNoneValidation(ctx context.Context, tx *types.Transaction) (*types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransactionNoneValidation", ctx, tx)
	ret0, _ := ret[0].(*types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransactionNoneValidation indicates an expected call of SendTransactionNoneValidation
func (mr *MockClientMockRecorder) SendTransactionNoneValidation(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransactionNoneValidation", reflect.TypeOf((*MockClient)(nil).SendTransactionNoneValidation), ctx, tx)
}

// TxPoolInfo mocks base method
func (m *MockClient) TxPoolInfo(ctx context.Context) (*types.TxPoolInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPoolInfo", ctx)
	ret0, _ := ret[0].(*types.TxPoolInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxPoolInfo indicates an expected call of TxPoolInfo
func (mr *MockClientMockRecorder) TxPoolInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPoolInfo", reflect.TypeOf((*MockClient)(nil).TxPoolInfo), ctx)
}

// GetBlockchainInfo mocks base method
func (m *MockClient) GetBlockchainInfo(ctx context.Context) (*types.BlockchainInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockchainInfo", ctx)
	ret0, _ := ret[0].(*types.BlockchainInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainInfo indicates an expected call of GetBlockchainInfo
func (mr *MockClientMockRecorder) GetBlockchainInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainInfo", reflect.TypeOf((*MockClient)(nil).GetBlockchainInfo), ctx)
}

// BatchTransactions mocks base method
func (m *MockClient) BatchTransactions(ctx context.Context, batch []types.BatchTransactionItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchTransactions", ctx, batch)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchTransactions indicates an expected call of BatchTransactions
func (mr *MockClientMockRecorder) BatchTransactions(ctx, batch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchTransactions", reflect.TypeOf((*MockClient)(nil).BatchTransactions), ctx, batch)
}

// BatchLiveCells mocks base method
func (m *MockClient) BatchLiveCells(ctx context.Context, batch []types.BatchLiveCellItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchLiveCells", ctx, batch)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchLiveCells indicates an expected call of BatchLiveCells
func (mr *MockClientMockRecorder) BatchLiveCells(ctx, batch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchLiveCells", reflect.TypeOf((*MockClient)(nil).BatchLiveCells), ctx, batch)
}

// GetTip mocks base method
func (m *MockClient) GetTip(ctx context.Context) (*indexer.TipHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTip", ctx)
	ret0, _ := ret[0].(*indexer.TipHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTip indicates an expected call of GetTip
func (mr *MockClientMockRecorder) GetTip(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTip", reflect.TypeOf((*MockClient)(nil).GetTip), ctx)
}

// GetCellsCapacity mocks base method
func (m *MockClient) GetCellsCapacity(ctx context.Context, searchKey *indexer.SearchKey) (*indexer.Capacity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCellsCapacity", ctx, searchKey)
	ret0, _ := ret[0].(*indexer.Capacity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCellsCapacity indicates an expected call of GetCellsCapacity
func (mr *MockClientMockRecorder) GetCellsCapacity(ctx, searchKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCellsCapacity", reflect.TypeOf((*MockClient)(nil).GetCellsCapacity), ctx, searchKey)
}

// GetCells mocks base method
func (m *MockClient) GetCells(ctx context.Context, searchKey *indexer.SearchKey, order indexer.SearchOrder, limit uint64, afterCursor string) (*indexer.LiveCells, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCells", ctx, searchKey, order, limit, afterCursor)
	ret0, _ := ret[0].(*indexer.LiveCells)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCells indicates an expected call of GetCells
func (mr *MockClientMockRecorder) GetCells(ctx, searchKey, order, limit, afterCursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCells", reflect.TypeOf((*MockClient)(nil).GetCells), ctx, searchKey, order, limit, afterCursor)
}

// GetTransactions mocks base method
func (m *MockClient) GetTransactions(ctx context.Context, searchKey *indexer.SearchKey, order indexer.SearchOrder, limit uint64, afterCursor string) (*indexer.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, searchKey, order, limit, afterCursor)
	ret0, _ := ret[0].(*indexer.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions
func (mr *MockClientMockRecorder) GetTransactions(ctx, searchKey, order, limit, afterCursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockClient)(nil).GetTransactions), ctx, searchKey, order, limit, afterCursor)
}

// Close mocks base method
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}
